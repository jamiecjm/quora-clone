c
params
params[:id]
c
params[:id]
c
self.questionvotes
c
self.questionvotes
Questionvote.find(46).delete
self.questionvotes
self.questinovotes
qv
c
qv
c
qn
c
current_user.downvoted_question?(q)
q
c
user.errors.messages.keys[0]
user.errors.messages[0]
user.errors.messages[o]
user.errors.messages
user.errors.messages.values[0]
user.errors.messsages.values[0]
c
user.errors.messages
c
user.errors.messages
user.errors.message
user.errors
c
params.values
params
c
q.answers == []
q.answers == nil
q.answers
c
q.answers
c
q.answers.topvoted[0].text
q.answers.topvoted[0]
q.answers.topvoted
q.answers
c
question
votecount
count
c
question
count.index(count.max)
votecount
count
c
votecount
q
count.index(count.max)
i
c
voted
c
q.id
self.questionvotes
voted
c
voted
c
voted
c
Questionvote.delete_all
Question.all
params[:id]
current_user.questionvotes
c
request.fullpath
request.host
request.original_url()
request.host_with_port
c
user.save
c
user.password
user.password_confirmation
password_confirmation
user.errors.messages
user.erros.messages
user.save
c
current_user
c
session
c
session[:id]
session
session=nil
session
c
session[:id] = nil
session
c
session[:id]
session
c
session
c
session
c
session
c
session
c
session
c
session
session = nil
session
c
session
session={}
session.delete
c
session
sessions
c
params
c
user.password
user.save
user
usere
n
params
c
params
c
params
